package day56_수4_자바정리_클래스_예제;

// 은행 계좌
public class BankAccount {
	
	// 은행 계좌와 관련된 데이터. ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	int balance;
	
	
	BankAccount()
	{
		int balance = 0;
		
	}
	// 기본 생성자는 반드시 적어줘야 한다.  --> 클래스타입 배열로 생성하는 경우는 묵시적으로 기본 생성자가 호출되기 때문
	// 명시적으로 다 초기화 해주어야 한다 --> 신뢰도 때문
	
	
	
	
	
	
	// 은행 계좌와 관련된 메소드.  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	
	// 입금
	// return : 잔액 (출금불가능일경우 -1)
	// paramter : 출금액
	int deposit(BankAccount this, int amount)  // <ㅡㅡ 이렇게 this가 파라미터로 들어간다. 오류가 뜨지 않는다.
	{
		
		return balance;
	}
	
			//	int형 boolean형 어느 것으로 해도 상관없는 경우는 int형으로 하는 것이 좋다.
			//	int형이 boolean의 기능을 포함할 수 있기 때문이다.

	
	// 출금
	// return : 잔액 (출금불가능일경우 -1)
	// paramter : 출금액
	int withdraw(int 출금금액)
	{
		return  balance;
	}
	
	
			// !주의 : 입금하고 출금은 메소드가 서로 관련이 있기 때문에
			// 형식을 비슷하게 가져가야 한다.
	
	
	// ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	
 					
	
	
	// 객체지향의 목적은 품질을 좋게 하고 리소스를 적게 하고 싶은 것이다.
	
	// 엔지니어링에서 장점 하면 딱 두가지만 생각하면 된다.
	// 1. 자원이 적게 들어가든지 (인력, 시간 등등) 
	// 2. 품질이 좋아지든지		(성능, 견고성 등등)
	

	// 클래스의 목표가 뭐에요? 라는 광범위한 질문을 받는다면  
	// 측면을 먼저 생각하고 
	// --> 자원-품질 측면
	
	// 유지보수를 쉽게 하려면 --> 리더밸리티를 높게 한다.
	// 					 --> 모듈화 ( 응집도를 높이고 결합도 낮춤 )  
	
	// 묶어놓으면 리더밸리티를 높이고, 유지보수하기 쉽다.
	
	// 객체지향이 의미가 있으려면, 어느 정도 볼륨이 있어야한다.
	// 객체지향은 볼륨이 적을 때는 아무런 티가 나지 않는다.
	
	
	
	// 생성자: 클래스를 인스턴스화 할 때, 필드를 초기화하는 메소드
	
	
}
